/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
 */

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
interface ImageState {
  loaded: boolean;
  error: boolean;
  url: string;
  element?: HTMLImageElement;
  timestamp: number;
}

// –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class ImageCache {
  private static instance: ImageCache;
  private cache: Map<string, ImageState> = new Map();
  private loadPromises: Map<string, Promise<HTMLImageElement>> = new Map();
  private defaultImage: string = '/uploads/default-avatar-test.jpg';
  private preloadQueue: string[] = [];
  private isProcessingQueue: boolean = false;
  private concurrentLoads: number = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
  private domainRegex = /^(?:https?:\/\/)?(?:[^@\n]+@)?(?:www\.)?([^:/\n?]+)/;
  private apiBasePaths = ['/api/users', '/api/projects', '/api/resumes', '/api/public'];
  
  private constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–∞–∑—É
    this.loadImage(this.defaultImage).catch(() => {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    console.log('üñºÔ∏è ImageCache –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', this.defaultImage);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ñ–ª–∞–π–Ω/–æ–Ω–ª–∞–π–Ω —Å–æ–±—ã—Ç–∏–π
    window.addEventListener('online', () => this.handleOnlineStatusChange(true));
    window.addEventListener('offline', () => this.handleOnlineStatusChange(false));
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫—ç—à–∞ (–ø–∞—Ç—Ç–µ—Ä–Ω Singleton)
  public static getInstance(): ImageCache {
    if (!ImageCache.instance) {
      ImageCache.instance = new ImageCache();
    }
    return ImageCache.instance;
  }
  
  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param url –ò—Å—Ö–æ–¥–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π URL
   */
  public normalizeUrl(url: string | undefined | null): string {
    if (!url) return this.defaultImage;
    
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ JSON —Å—Ç—Ä–æ–∫–∞—Ö
    url = url.replace(/^"(.*)"$/, '$1');
    
    // –ï—Å–ª–∏ URL —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (url.startsWith('http://') || url.startsWith('https://')) {
      return url;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –ø—É—Ç–µ–º –∫ uploads
    if (!url.startsWith('/')) {
      return `/uploads/${url.split('/').pop()}`;
    }
    
    return url;
  }
  
  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω –∏–∑ URL
   * @param url URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @returns –î–æ–º–µ–Ω
   */
  private extractDomain(url: string): string {
    const match = url.match(this.domainRegex);
    return match?.[1] || '';
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–Ω–µ—à–Ω–∏–º (–Ω–µ —Å —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–º–µ–Ω–∞)
   * @param url URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns true –µ—Å–ª–∏ URL –≤–Ω–µ—à–Ω–∏–π
   */
  private isExternalUrl(url: string): boolean {
    if (url.startsWith('/')) return false;
    
    const currentDomain = this.extractDomain(window.location.href);
    const urlDomain = this.extractDomain(url);
    
    return currentDomain !== urlDomain && urlDomain !== '';
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
   * @param isOnline –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  private handleOnlineStatusChange(isOnline: boolean): void {
    if (isOnline) {
      console.log('üåê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏...');
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
      Array.from(this.cache.entries()).forEach(([url, state]) => {
        if (state.error) {
          this.cache.delete(url);
          this.preloadImage(url);
        }
      });
    }
  }
  
  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param url URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
   * @returns Promise —Å HTMLImageElement
   */
  public loadImage(url: string): Promise<HTMLImageElement> {
    const normalizedUrl = this.normalizeUrl(url);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫—ç—à–µ
    const cachedImage = this.cache.get(normalizedUrl);
    if (cachedImage && cachedImage.loaded && !cachedImage.error) {
      return Promise.resolve(cachedImage.element as HTMLImageElement);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ–º–∏—Å –¥–ª—è —ç—Ç–æ–≥–æ URL
    const existingPromise = this.loadPromises.get(normalizedUrl);
    if (existingPromise) {
      return existingPromise;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const loadPromise = new Promise<HTMLImageElement>((resolve, reject) => {
      const img = new Image();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      img.onload = () => {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        this.cache.set(normalizedUrl, {
          loaded: true,
          error: false,
          url: normalizedUrl,
          element: img,
          timestamp: Date.now()
        });
        this.loadPromises.delete(normalizedUrl);
        resolve(img);
      };
      
      img.onerror = () => {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
        this.cache.set(normalizedUrl, {
          loaded: false,
          error: true,
          url: normalizedUrl,
          timestamp: Date.now()
        });
        this.loadPromises.delete(normalizedUrl);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
        if (normalizedUrl !== this.defaultImage) {
          console.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${normalizedUrl}, –∏—Å–ø–æ–ª—å–∑—É—é –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`);
          this.loadImage(this.defaultImage)
            .then(resolve)
            .catch(reject);
        } else {
          reject(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${normalizedUrl}`));
        }
      };
      
      // –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö URL —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º crossOrigin
      if (this.isExternalUrl(normalizedUrl)) {
        img.crossOrigin = 'anonymous';
      }
      
      // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      img.src = normalizedUrl;
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–∏—Å –≤ –∫—ç—à–µ
    this.loadPromises.set(normalizedUrl, loadPromise);
    
    return loadPromise;
  }
  
  /**
   * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
   * @param url URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
   */
  public preloadImage(url: string): void {
    const normalizedUrl = this.normalizeUrl(url);
    
    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –≤ –∫—ç—à–µ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    const cachedImage = this.cache.get(normalizedUrl);
    if (cachedImage && cachedImage.loaded && !cachedImage.error) {
      return;
    }
    
    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (this.loadPromises.has(normalizedUrl)) {
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
    if (!this.preloadQueue.includes(normalizedUrl)) {
      this.preloadQueue.push(normalizedUrl);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
      if (!this.isProcessingQueue) {
        this.processPreloadQueue();
      }
    }
  }
  
  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  private async processPreloadQueue(): Promise<void> {
    if (this.isProcessingQueue) return;
    
    this.isProcessingQueue = true;
    
    while (this.preloadQueue.length > 0) {
      // –ë–µ—Ä–µ–º –ø–∞–∫–µ—Ç URL –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      const batch = this.preloadQueue.splice(0, this.concurrentLoads);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–∫–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const promises = batch.map(url => this.loadImage(url).catch(() => {
        // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥—Ä—É–≥–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${url}`);
      }));
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–∫–µ—Ç–∞
      await Promise.allSettled(promises);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–∏—Å—Ç–µ–º—É
      if (this.preloadQueue.length > 0) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }
    
    this.isProcessingQueue = false;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
   * @param url URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
   */
  public getImageUrl(url: string): string {
    const normalizedUrl = this.normalizeUrl(url);
    const cachedImage = this.cache.get(normalizedUrl);
    
    // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∫–ª–∞–¥–∫–∏ –ë–∞–Ω–∫—Å—Ç–µ—Ä –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
    // —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —É–≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    if (window.location.pathname === '/image-test') {
      console.log(`üß™ –ù–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: URL ${normalizedUrl} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –±–µ–∑ —Ñ–æ–ª–±—ç–∫–∞`);
      return normalizedUrl;
    }
    
    if (cachedImage && cachedImage.loaded && !cachedImage.error) {
      return normalizedUrl;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ –±—É–¥—É—â–µ–µ
    this.preloadImage(normalizedUrl);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–µ–µ
    return this.defaultImage;
  }
  
  /**
   * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ API
   */
  public async preloadFromApi(): Promise<void> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ API...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
      try {
        const response = await fetch('/api/preload-resources');
        if (response.ok) {
          const data = await response.json();
          if (data.success && Array.isArray(data.imageUrls) && data.imageUrls.length > 0) {
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: ${data.counts.total} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
            
            // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            data.imageUrls.forEach((url: string) => this.preloadImage(this.normalizeUrl(url)));
            
            // –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:`, {
              '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': data.counts.users,
              '–ü—Ä–æ–µ–∫—Ç—ã': data.counts.projects,
              '–†–µ–∑—é–º–µ': data.counts.resumes,
              '–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö': data.counts.total
            });
            
            return; // –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
          }
        }
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', e);
      }
      
      // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
      const fetchPromises = this.apiBasePaths.map(path => 
        fetch(path)
          .then(res => res.ok ? res.json() : [])
          .catch(() => [])
      );
      
      const results = await Promise.allSettled(fetchPromises);
      
      // –°–æ–±–∏—Ä–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
      const imageUrls: Set<string> = new Set();
      
      results.forEach((result) => {
        if (result.status === 'fulfilled') {
          const data = result.value;
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã –¥–∞–Ω–Ω—ã—Ö
          if (Array.isArray(data)) {
            data.forEach((item: any) => {
              // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
              if (item.avatar) {
                imageUrls.add(this.normalizeUrl(item.avatar));
              }
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
              if (item.photo) {
                imageUrls.add(this.normalizeUrl(item.photo));
              }
              
              // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
              if (item.user && item.user.avatar) {
                imageUrls.add(this.normalizeUrl(item.user.avatar));
              }
            });
          }
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç API –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
          else if (data.imageUrls && Array.isArray(data.imageUrls)) {
            data.imageUrls.forEach((url: string) => {
              imageUrls.add(this.normalizeUrl(url));
            });
          }
        }
      });
      
      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (imageUrls.size > 0) {
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${imageUrls.size} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏`);
        Array.from(imageUrls).forEach(url => this.preloadImage(url));
      } else {
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –≤ API');
        
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Ö–æ—Ç—è –±—ã –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.preloadImage(this.defaultImage);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ API:', error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —Ö–æ—Ç—è –±—ã –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      this.preloadImage(this.defaultImage);
    }
  }
  
  /**
   * –û—á–∏—â–∞–µ—Ç –∫—ç—à –æ—Ç —Å—Ç–∞—Ä—ã—Ö, –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   * @param maxAge –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å)
   */
  public clearOldCache(maxAge: number = 3600000): void {
    const now = Date.now();
    
    Array.from(this.cache.entries()).forEach(([url, state]) => {
      // –ù–µ –æ—á–∏—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      if (url === this.defaultImage) {
        return;
      }
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
      if (now - state.timestamp > maxAge) {
        this.cache.delete(url);
      }
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export const imageService = ImageCache.getInstance();